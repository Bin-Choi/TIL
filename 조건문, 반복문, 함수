## 조건표현식

return = (True값) if 조건 else (Flase값)
print(return)

##반복문 - for, while 

while은 종료코드가 필요함 (안하면 무한루프)
for은 반복가능한 객체를 모두 순회하면 종료

##복합연산자

연산과 할당을 합쳐 놓은것 ( += 등)

##for문 순회 
###Dict순회
- 추가 메서드를 활용하여 순회 가능
  - keys() : key값 뽑기
  - values() : values값 뽑기
  - items() : (key, value) 튜플로 뽑기
  
###enumerate
- index 와 객체를 쌍으로 담은 열거형 객체 반환
  - (index, value)형태의 튜플로 구성된 열거 객체 반환
  - (index 숫자 출발점은 지정 가능, 기본값 0 )

###List Comprehenion
- 표현식과 제어문을 통해 특정한 값을 가진 리스트를 간결하게 생성하는 방법
- [code for 변수 in iterable]  
- [code for 변수 in iterable if 조건식]

- 딕셔너리 생성
- [key: value for 변수 in iterable]
- [key: value for 변수 in iterable if 조건식]

##반복문 제어
- break
  - 반복문을 종료
- continue
  - continue 이후의 코드 블록은 수행하지 않고, 다음 반복을 수행
- for-else
  - 끝까지 반복문을 실행한 이후에 else 문 실행
    - break를 통해 중간에 종료되는 경우 else 문은 실행되지 않음
- pass
  - 아무것도 하지 않음(문법적으로 필요하지만, 할 일이 없을 때 사용)


  ##이름 검색 규칙
  LEGB
  Local scope : 지역 범위(현재 작업 중인 범위)
  Enclosed scope : 지역 범위 한 단계 위 범위
  Global scope : 최상단에 위치한 범위(스크립트 안에 있나?)
  Built-in scope : 모든 것을 담고 있는 범위(파이썬 자체에 있나?)

  Local scope에서 global 변수 값의 변경
  global 변수 적고 바꾸면 됨^_^

  ##map 
  map 반환 값
  - map이라는 class 객체로 반환

  ##filter
  순회 가능한 데이터구조의 모든 요소에 함수적용하고,
  그 결과가 True인 것들을 filter object로 반환.

  ##zip
  복수의 iterable을 모아 튜플을 원소로 하는 zip object를 반환

  ##lambda 함수
  ### lamdba[parameter]:표현식
- 람다함수
  - 표현식을 계산한 결과값을 반환하는 함수로, 이름이 없는 함수(익명함수라고 불림)
- 특징
  - return문을 가질 수 없음
  - 간편 조건문 외 조건문이나 반복문을 가질 수 없음
- 장점
  - 함수를 정의해서 사용하는 것보다 간결하게 사용가능
  - def를 사용할 수 없는 곳에서도 사용가능

; triangle_area = lambda b, h : 0.5 * b * h
; print(triangle_area(5, 6))

## 재귀함수
- 자기 자신을 호출하는 함수
- 무한한 호출을 목표 X
- 1개 이상의 base case(종료되는 상황)가 존재하고, 수렴하도록 작성

재귀 함수는 반복문으로 치환 가능
재귀 호출은 입력 값이 커질 수록 연산 속도가 오래 걸림 (가급적 반복문 사용)


##기능 -> 함수 , 다양한 기능을 하나의 파일 -> 모듈, 다양한 파일을 하나의 폴더 -> 패키지
## 다양한 패키를 하나의 묶음 -> 라이브러리, 이것을 관리하는 관리자 -> pip 
모듈과 패키지는 버전관리를 해줘야한다, 그것을 하는 공간은 가상환경

